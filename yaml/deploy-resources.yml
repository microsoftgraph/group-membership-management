parameters:  
- name: solutionAbbreviation
  type: string
- name: environmentAbbreviation
  type: string
- name: location
  type: string
- name: serviceConnection
  type: string
- name: root
  type: string
- name: tenantId
  type: string
- name: subscriptionId
  type: string
- name: subscriptionName
  type: string
- name: keyVaultReaders
  type: object

steps:

- task: AzurePowerShell@5
  displayName: 'Get existing data resources'
  inputs:
    azureSubscription: ${{parameters.serviceConnection}}
    scriptType: inlineScript
    inline: |
      $dataResources = Get-AzResource -ResourceGroupName ${{parameters.solutionAbbreviation}}-data-${{parameters.environmentAbbreviation}} | Select-Object -Property Name,ResourceType | ConvertTo-Json -Compress
      if(!$dataResources){
        $dataResources = "[]"
      }
      else {
        $dataResources = $dataResources.Replace("""", "'")
      }

      Write-Host "##vso[task.setvariable variable=dataResources;isOutput=true]$dataResources"
    azurePowerShellVersion: LatestVersion
  name: dataResourcesOutput

- task: AzureResourceManagerTemplateDeployment@3
  displayName: 'deploy persistent data'
  inputs:
    azureResourceManagerConnection: ${{parameters.serviceConnection}}
    subscriptionId: ${{parameters.subscriptionId}}
    resourceGroupName: ${{parameters.solutionAbbreviation}}-data-${{parameters.environmentAbbreviation}}
    location: $(location)
    csmFile: ${{ parameters.root }}/Infrastructure/data/template.bicep
    csmParametersFile: ${{parameters.root}}/Infrastructure/data/parameters/parameters.${{parameters.environmentAbbreviation}}.json
    overrideParameters: '-environmentAbbreviation "${{parameters.environmentAbbreviation}}" -location "${{parameters.location}}" -solutionAbbreviation "${{parameters.solutionAbbreviation}}" -tenantId "${{parameters.tenantId}}" -keyVaultReaders "${{parameters.keyVaultReaders}}" -existingDataResources "$(dataResourcesOutput.dataResources)"'
    deploymentMode: 'Incremental'
    deploymentOutputs: dataoutputs

- task: AzurePowerShell@5
  displayName: 'Open Network before read keyvault'
  inputs:
    azureSubscription: ${{parameters.serviceConnection}}
    scriptType: inlineScript
    inline: |
      $prereqsKeyVaultName = "${{parameters.solutionAbbreviation}}-prereqs-${{parameters.environmentAbbreviation}}"
      $dataKeyVaultName = "${{parameters.solutionAbbreviation}}-data-${{parameters.environmentAbbreviation}}"
      cd\
      cd '$(defaultWorkingDirectory)/Infrastructure/script'
      . ./Update-KeyvaultFirewallRule.ps1
      Update-KeyvaultFirewallRule	-KeyVaultName $prereqsKeyVaultName -Add $true
      Update-KeyvaultFirewallRule	-KeyVaultName $dataKeyVaultName -Add $true
    azurePowerShellVersion: LatestVersion
  name: preSecretRetrieval

- task: AzurePowerShell@4
  displayName: 'run main script'
  inputs:
    azureSubscription: ${{parameters.serviceConnection}}
    ScriptType: InlineScript
    Inline: |
      $secret = Get-AzKeyVaultSecret -VaultName ${{parameters.solutionAbbreviation}}-data-${{parameters.environmentAbbreviation}} -Name "sqlDatabaseConnectionString"
      $ssPtr = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($secret.SecretValue)
      try {
          $ConnectionString = [System.Runtime.InteropServices.Marshal]::PtrToStringBSTR($ssPtr)
      } finally {
          [System.Runtime.InteropServices.Marshal]::ZeroFreeBSTR($ssPtr)
      }
      if ([string]::IsNullOrWhiteSpace($ConnectionString)) {
          throw 'ConnectionString is empty';
      }

      . ${{ parameters.root }}/Scripts/main.ps1

      Set-UpdateQuery -SubscriptionName "${{parameters.subscriptionName}}" `
                       -SolutionAbbreviation "${{parameters.solutionAbbreviation}}" `
                       -EnvironmentAbbreviation "${{parameters.environmentAbbreviation}}" `
                       -ConnectionString $ConnectionString `
                       -Verbose
    azurePowerShellVersion: LatestVersion

- task: AzurePowerShell@5
  displayName: 'Close Network after read keyvault'
  inputs:
    azureSubscription: ${{parameters.serviceConnection}}
    scriptType: inlineScript
    inline: |
      $prereqsKeyVaultName = "${{parameters.solutionAbbreviation}}-prereqs-${{parameters.environmentAbbreviation}}"
      $dataKeyVaultName = "${{parameters.solutionAbbreviation}}-data-${{parameters.environmentAbbreviation}}"
      cd\
      cd '$(defaultWorkingDirectory)/Infrastructure/script'
      . ./Update-KeyvaultFirewallRule.ps1
      Update-KeyvaultFirewallRule	-KeyVaultName $prereqsKeyVaultName -Add $false
      Update-KeyvaultFirewallRule	-KeyVaultName $dataKeyVaultName -Add $false
    azurePowerShellVersion: LatestVersion
  name: postSecretRetrieval

- powershell: |
    Write-Host $ENV:dataoutputs;
    $outputs = ConvertFrom-Json -InputObject $ENV:dataoutputs;

    foreach ($output in $outputs.PSObject.Properties) {
      Write-Host "##vso[task.setvariable variable=data_$($output.Name);isOutput=true]$($output.Value.value)"
    }

  displayName: 'set data output variables'
  name: dataVariables

- task: AzurePowerShell@4
  displayName: 'run infrastructure script'
  inputs:
    azureSubscription: ${{parameters.serviceConnection}}
    scriptType: inlineScript
    inline: |
      cd\
      cd '${{parameters.root}}/Infrastructure/script'
      . ./PostDeploymentScript.ps1
      PostDeploymentScript -SolutionAbbreviation ${{parameters.solutionAbbreviation}} -EnvironmentAbbreviation ${{parameters.environmentAbbreviation}}
    azurePowerShellVersion: LatestVersion
  name: postDeploymentScript