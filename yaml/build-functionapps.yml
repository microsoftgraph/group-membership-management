parameters:
  solutionAbbreviation: ''
  environmentAbbreviation: ''
  serviceConnection: ''
  name: ''

steps:
  
  - task: DotNetCoreCLI@2
    displayName: 'dotnet build ${{ parameters.name }} function'
    inputs:
      command: build
      projects: 'Service/GroupMembershipManagement/Hosts/${{ parameters.name }}/Function/*.csproj'
      arguments: '--configuration $(buildConfiguration)'

  - task: DotNetCoreCLI@2
    displayName: 'dotnet test ${{ parameters.name }} function'
    inputs:
      command: test
      projects: 'Service/GroupMembershipManagement/Hosts/${{ parameters.name }}/Services.Tests'
      arguments: '--configuration $(BuildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)\TestResults\Coverage\${{ parameters.name }}\ /p:Exclude="[*.Tests]*"'
    condition: and(succeeded(), eq(variables['BuildConfiguration'], 'debug'))

  - task: PublishCodeCoverageResults@1
    displayName: 'collect code coverage'
    inputs:
      codeCoverageTool: 'cobertura'
      summaryFileLocation: $(Build.SourcesDirectory)/TestResults/Coverage/${{ parameters.name }}/coverage.cobertura.xml
      reportDirectory: $(Build.SourcesDirectory)/TestResults/Coverage/Reports
      failIfCoverageEmpty: false
    condition: and(succeeded(), eq(variables['BuildConfiguration'], 'debug'))      

  - task: mspremier.BuildQualityChecks.QualityChecks-task.BuildQualityChecks@6
    displayName: 'Check build quality'
    inputs:
      checkCoverage: true
      coverageFailOption: fixed
      coverageType: lines
      coverageThreshold: 36
    condition: and(succeeded(), eq(variables['BuildConfiguration'], 'debug'))    

  - task: DotNetCoreCLI@2
    displayName: 'dotnet publish ${{ parameters.name }} function'
    inputs:
      command: publish
      arguments: '--configuration Release --output ${{ parameters.name }}'
      projects: 'Service/GroupMembershipManagement/Hosts/${{ parameters.name }}/Function/*.csproj'
      publishWebProjects: false
      modifyOutputPath: false
      zipAfterPublish: false

  - task: ArchiveFiles@2
    displayName: 'archive ${{ parameters.name }} function'
    inputs:
      rootFolderOrFile: "$(System.DefaultWorkingDirectory)/${{ parameters.name }}"
      includeRootFolder: false
      archiveFile: "$(System.DefaultWorkingDirectory)/functions/${{ parameters.name }}.zip"

  - task: CopyFiles@2
    displayName: 'copy ${{ parameters.name }} function package'
    inputs:
      SourceFolder: $(System.DefaultWorkingDirectory)/functions
      Contents: ${{ parameters.name }}.zip
      TargetFolder: '$(build.artifactstagingdirectory)/function_packages/'

  - task: CopyFiles@2
    displayName: 'copy ${{ parameters.name }} function arm templates'
    inputs:
      SourceFolder: Service/GroupMembershipManagement/Hosts/${{ parameters.name }}
      Contents: '**\Infrastructure\**'
      TargetFolder: '$(build.artifactstagingdirectory)/functions_arm_templates/${{ parameters.name }}'

  - task: PublishBuildArtifacts@1
    displayName: 'publish functions artifacts'
    inputs:
      PathtoPublish: '$(build.artifactstagingdirectory)'
      ArtifactName: '$(Build.BuildNumber)'
