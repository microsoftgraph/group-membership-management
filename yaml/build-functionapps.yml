parameters:
- name: functionApps
  type: object
- name: repoToCheckout
  type: string
- name: checkoutPath
  type: string
- name: dependsOn
  type: object
- name: condition
  type: object
- name: buildRelease
  type: boolean

stages:

- stage: Build_Functions
  dependsOn: ${{ parameters.dependsOn }}
  condition: ${{ parameters.condition }}

  jobs:
  - ${{ each app in parameters.functionApps }}:
      - job: Build_${{ app.function.name }}
        ${{ if parameters.buildRelease }}:
          strategy:
              maxParallel: 2
              matrix:
                debug:
                  BuildConfiguration: debug
                release:
                  BuildConfiguration: release
        ${{ else }}:
          variables:
            BuildConfiguration: 'debug'

        steps:

        - ${{ if ne(parameters.repoToCheckout, '') }}:
          - checkout: ${{ parameters.repoToCheckout }}
            path: ${{ parameters.checkoutPath }}

        - task: UseDotNet@2
          inputs:
            packageType: 'sdk'
            useGlobalJson: true
            workingDirectory: 'Service\GroupMembershipManagement'

        - task: DotNetCoreCLI@2
          displayName: 'dotnet build ${{ app.function.name }} function'
          retryCountOnTaskFailure: 3
          inputs:
            command: build
            projects: 'Service/GroupMembershipManagement/Hosts/${{ app.function.name }}/Function/*.csproj'
            arguments: '--configuration $(buildConfiguration)'

        - task: DotNetCoreCLI@2
          displayName: 'dotnet test ${{ app.function.name }} function'
          retryCountOnTaskFailure: 3
          inputs:
            command: test
            projects: 'Service/GroupMembershipManagement/Hosts/${{ app.function.name }}/Services.Tests'
            arguments: '--configuration $(BuildConfiguration)
                        /p:CollectCoverage=true
                        /p:CoverletOutputFormat=cobertura
                        /p:threshold=${{ app.function.coverageThreshold }}
                        /p:thresholdType=line
                        /p:thresholdStat=total
                        /p:CoverletOutput=$(Build.SourcesDirectory)\TestResults\Coverage\${{ app.function.name }}\
                        /p:Exclude=[Repositories.*]*%2c[Entities]*%2c[*.Entities]*%2c[Models]*%2c[*.Models]*%2c[*.Tests]*%2c[*.Mocks]*%2c[Common.DependencyInjection]*%2c[Hosts.FunctionBase]*%2c[DIConcreteTypes]*'
          condition: and(succeeded(), eq(variables['BuildConfiguration'], 'debug'))

        - task: PublishCodeCoverageResults@1
          displayName: 'collect code coverage'
          inputs:
            codeCoverageTool: 'cobertura'
            summaryFileLocation: $(Build.SourcesDirectory)/TestResults/Coverage/${{ app.function.name }}/coverage.cobertura.xml
            reportDirectory: $(Build.SourcesDirectory)/TestResults/Coverage/${{ app.function.name }}/Reports
            failIfCoverageEmpty: false
          condition: and(succeeded(), eq(variables['BuildConfiguration'], 'debug'))

        - task: DotNetCoreCLI@2
          displayName: 'dotnet publish ${{ app.function.name }} function'
          inputs:
            command: publish
            arguments: '--configuration $(BuildConfiguration) --output ${{ app.function.name }}'
            projects: 'Service/GroupMembershipManagement/Hosts/${{ app.function.name }}/Function/*.csproj'
            publishWebProjects: false
            modifyOutputPath: false
            zipAfterPublish: false

        - task: ArchiveFiles@2
          displayName: 'archive ${{ app.function.name }} function'
          inputs:
            rootFolderOrFile: "$(System.DefaultWorkingDirectory)/${{ app.function.name }}"
            includeRootFolder: false
            archiveFile: "$(System.DefaultWorkingDirectory)/functions/${{ app.function.name }}.zip"

        - task: CopyFiles@2
          displayName: 'copy ${{ app.function.name }} function package'
          inputs:
            SourceFolder: $(System.DefaultWorkingDirectory)/functions
            Contents: ${{ app.function.name }}.zip
            TargetFolder: '$(build.artifactstagingdirectory)/function_packages/'

        - task: CopyFiles@2
          displayName: 'copy ${{ app.function.name }} function arm templates'
          inputs:
            SourceFolder: Service/GroupMembershipManagement/Hosts/${{ app.function.name }}
            Contents: '**\Infrastructure\**'
            TargetFolder: '$(build.artifactstagingdirectory)/functions_arm_templates/${{ app.function.name }}'

        - task: PublishBuildArtifacts@1
          displayName: 'publish functions artifacts'
          inputs:
            PathtoPublish: '$(build.artifactstagingdirectory)'
            ArtifactName: '$(Build.BuildNumber)_$(BuildConfiguration)'
